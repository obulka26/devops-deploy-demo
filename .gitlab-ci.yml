stages:
  - test
  - build
  - terraform
  - ansible

run_tests:
  stage: test
  image: python:3.12.3-slim
  before_script:
    - pip install -r requirements-test.txt
  script:
    - python3 -m unittest discover app/tests

build_image:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
    IMAGE_NAME: olegbulka/public-repo
    IMAGE_TAG: devops-app-example-1.0-amd64
  before_script:
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASS
  script:
    - docker buildx build --platform linux/amd64 -t $IMAGE_NAME:$IMAGE_TAG .
    - docker push $IMAGE_NAME:$IMAGE_TAG

terraform_deploy:
  stage: terraform
  image:
    name: hashicorp/terraform:light
    entrypoint: ["/bin/sh", "-c"]
  before_script:
    - apk add --no-cache openssh
  script:
    - cd terraform
    - terraform init
    - terraform fmt -check
    - terraform validate
    - terraform apply -auto-approve
    - echo "[web]" > ../ansible/hosts.ini
    - echo "$(terraform output -raw ec2_ip) ansible_user=ubuntu ansible_ssh_private_key_file=$SSH_KEY_PATH" >> ../ansible/hosts.ini
  artifacts:
    paths:
      - ansible/hosts.ini
    expire_in: 1 hour
  only:
    - main
  when: manual

ansible_configure:
  stage: ansible
  image: python:3.12-slim
  dependencies:
    - terraform_deploy
  before_script:
    - apt-get update && apt-get install -y sshpass
    - pip install ansible
    - export SSH_KEY_PATH="$HOME/.ssh/devops-key-eu-central.pem"
    - mkdir -p "$(dirname "$SSH_KEY_PATH")"
    - echo "$SSH_PRIVATE_KEY" | base64 -d > $SSH_KEY_PATH
    - chmod 600 $SSH_KEY_PATH
    - echo -e "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
  script:
    - cd ansible
    - cat hosts.ini # for debug
    - ansible-playbook -i hosts.ini playbook.yml
  only:
    - main
  when: manual
